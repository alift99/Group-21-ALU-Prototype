module autoTester (
    input clk,  // clock
    input rst,  // reset
    output a[16],
    output b[16],
    output alufn[6],
    output solution[16],
    output simError
) 
{
  const A_ROM = {b0000000000001010,
                 b0000000001000000,
                 b0000000000000101,
                 b1000000000010111,
                 b0010111000101011,
                 b0000000000000110,
                 b0000000100000000,
                 b0000000000000000};
  const B_ROM = {b0000000000000101,
                 b0000000000011000, 
                 b0000000000000100,
                 b0000000000000001,
                 b0100010101100011,
                 b1000000000000101,
                 b0000000100000000,
                 b0000000000000100};
  const ALUFN_ROM = {b000000, // Addition
                     b000001, // Subtraction
                     b100000, // Shift left
                     b100011, // Signed Shift Right
                     b011000, // And
                     b010110, // XOR
                     b110011, // Equals to
                     b110101}; // Less than
  const SOLUTION_ROM = {b0000000000001111, // b1010 + b0101
                        b0000000000101000, // b1000000 - b0011000 
                        b0000000001010000, // b101 << b100
                        b1100000000001011, // $signed(b1000000000010111) >>> b1
                        b0000010000100011, // b0010111000101011 & b0100010101100011
                        b1000000000000011, // b0000000000000110 ^ b1000000000000101
                        b0000000000000001, // b100000000 == b100000000
                        b0000000000000001}; // b000 < b100 
  
  dff idx[4](#INIT(0), .clk(clk), .rst(rst)); // Index for accessing different sets of a,b,alufn & solution
  
  always 
  {
    if(idx.q == b1000)
    {
      idx.d = b0000;
    }
    a = A_ROM[idx.q];
    b = B_ROM[idx.q];
    alufn = ALUFN_ROM[idx.q];
    solution = SOLUTION_ROM[idx.q];
    simError = idx.q[0]; // Make the ALU simulate an error every other case
    idx.d = idx.q + 1;    
  }
}
